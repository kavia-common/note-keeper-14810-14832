{"is_source_file": true, "format": "Python", "description": "This file defines API endpoints for managing notes using FastAPI. It includes CRUD operations such as listing, creating, retrieving, updating (full and partial), and deleting notes. The file relies on external services like NotesService and schemas for data validation and serialization.", "external_files": ["../db", "../services/notes_service", "../schemas/note"], "external_methods": ["get_db", "NotesService", "NoteCreate", "NoteOut", "NoteUpdate"], "published": ["list_notes", "create_note", "get_note", "update_note", "patch_note", "delete_note"], "classes": [], "methods": [{"name": "NotesService get_service(db: Session = Depends(get_db))", "description": "Provides a NotesService instance using dependency injection.", "scope": "", "scopeKind": ""}, {"name": "list[NoteOut] list_notes( skip: int = Query(0, ge=0, description=\"Number of items to skip\"), limit: int = Query(50, ge=1, le=100, description=\"Maximum number of items to return\"), service: NotesService = Depends(get_service), )", "description": "Handles GET requests to list notes with pagination.", "scope": "", "scopeKind": ""}, {"name": "NoteOut create_note(payload: NoteCreate, service: NotesService = Depends(get_service))", "description": "Handles POST requests to create a new note.", "scope": "", "scopeKind": ""}, {"name": "NoteOut get_note( note_id: int = Path(..., ge=1, description=\"ID of the note to retrieve\"), service: NotesService = Depends(get_service), )", "description": "Handles GET requests to retrieve a specific note by ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut update_note( payload: NoteCreate, note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), service: NotesService = Depends(get_service), )", "description": "Handles PUT requests to replace an existing note by ID.", "scope": "", "scopeKind": ""}, {"name": "NoteOut patch_note( payload: NoteUpdate, note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), service: NotesService = Depends(get_service), )", "description": "Handles PATCH requests for partial updates to a note.", "scope": "", "scopeKind": ""}, {"name": "None delete_note( note_id: int = Path(..., ge=1, description=\"ID of the note to delete\"), service: NotesService = Depends(get_service), )", "description": "Handles DELETE requests to remove a note by ID.", "scope": "", "scopeKind": ""}], "calls": ["Depends(get_db)", "NotesService(db)", "service.list_notes", "service.create_note", "service.get_note", "service.update_note", "service.delete_note", "HTTPException"], "search-terms": ["FastAPI notes router", "Notes CRUD endpoints", "notes API implementation", "notes router", "notes endpoint definitions"], "state": 2, "file_id": 11, "knowledge_revision": 40, "git_revision": "3396faca0ea099eb4b7d10cd9e5736086070d97e", "revision_history": [{"25": ""}, {"40": "3396faca0ea099eb4b7d10cd9e5736086070d97e"}], "ctags": [{"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def create_note(payload: NoteCreate, service: NotesService = Depends(get_service)) -> NoteOut:$/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "(payload: NoteCreate, service: NotesService = Depends(get_service))"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def delete_note($/", "language": "Python", "typeref": "typename:None", "kind": "function", "signature": "( note_id: int = Path(..., ge=1, description=\"ID of the note to delete\"), service: NotesService = Depends(get_service), )"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( note_id: int = Path(..., ge=1, description=\"ID of the note to retrieve\"), service: NotesService = Depends(get_service), )"}, {"_type": "tag", "name": "get_service", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def get_service(db: Session = Depends(get_db)) -> NotesService:$/", "language": "Python", "typeref": "typename:NotesService", "kind": "function", "signature": "(db: Session = Depends(get_db))"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def list_notes($/", "language": "Python", "typeref": "typename:list[NoteOut]", "kind": "function", "signature": "( skip: int = Query(0, ge=0, description=\"Number of items to skip\"), limit: int = Query(50, ge=1, le=100, description=\"Maximum number of items to return\"), service: NotesService = Depends(get_service), )"}, {"_type": "tag", "name": "patch_note", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def patch_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( payload: NoteUpdate, note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), service: NotesService = Depends(get_service), )"}, {"_type": "tag", "name": "router", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^router = APIRouter(prefix=\"\\/notes\", tags=[\"Notes\"])$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/note-keeper-14810-14832/notes_backend/src/api/routers/notes.py", "pattern": "/^def update_note($/", "language": "Python", "typeref": "typename:NoteOut", "kind": "function", "signature": "( payload: NoteCreate, note_id: int = Path(..., ge=1, description=\"ID of the note to update\"), service: NotesService = Depends(get_service), )"}], "hash": "871eda412f2a01bfae31cec866941668", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/routers/notes.py", "fields": [{"name": "router = APIRouter(prefix=\"\\/notes\", tags=[\"Notes\"])", "scope": "", "scopeKind": "", "description": "unavailable"}]}